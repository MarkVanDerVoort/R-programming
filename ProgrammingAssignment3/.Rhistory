state.hospitals <- subset(outcomes, outcomes$State == state)
# get the dynamic column for the disease
outcome.col.index <- match(as.name(outcome), names(outcomes))
outcome.col <- state.hospitals[ , outcome.col.index]
# discard the rest of the columns, not sure if this performs better
# certainly debugs better..
name.col.index = 2
state.hospitals <- state.hospitals[ , c(name.col.index,outcome.col.index)]
View(state.hospitals)
outcome.col <- as.numeric(state.hospitals[ , outcome.col.index])
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the dynamic column for the disease
outcome.col.index <- match(as.name(outcome), names(outcomes))
outcome.col <- as.numeric(state.hospitals[ , outcome.col.index])
# discard the rest of the columns, not sure if this performs better
# certainly debugs better..
name.col.index = 2
debug.state.hospitals <- state.hospitals[ , c(name.col.index,outcome.col.index)]
row.ordering <- order(state.outcome.col,
state.hospitals[ , name.col.index],
na.last=TRUE)
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the dynamic column for the disease
outcome.col.index <- match(as.name(outcome), names(outcomes))
state.outcome.col <- as.numeric(state.hospitals[ , outcome.col.index])
# discard the rest of the columns, not sure if this performs better
# certainly debugs better..
name.col.index = 2
debug.state.hospitals <- state.hospitals[ , c(name.col.index,outcome.col.index)]
row.ordering <- order(state.outcome.col,
state.hospitals[ , name.col.index],
na.last=TRUE)
ordered.state.hospitals <- state.hospitals[ row.ordering , ]
ordered.state.hospitals$Hospital.Name[1]
submit()
submit()
submit()
?rank
submit()
submit()
submit()
submit()
(r1 <- rank(x1 <- c(3, 1, 4, 15, 92)))
submit()
submit()
rankhospital("TX", "heart failure", 4)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
state <- "MD"
outcome <- "heart attack"
rank <- "worst"
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the rank now..
if (num == "best"){
eff.rank <- 1
} else if (num == "worst") {
eff.rank <- nrow(state.hospitals)
} else {
eff.rank <- num
}
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the rank now..
if (num == "best"){
eff.rank <- 1
} else if (num == "worst") {
eff.rank <- nrow(state.hospitals)
} else {
eff.rank <- rank
}
outcomes <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the rank now..
if (num == "best"){
eff.rank <- 1
} else if (num == "worst") {
eff.rank <- nrow(state.hospitals)
} else {
eff.rank <- rank
}
if (!(state %in% outcomes$State)) {
stop("invalid state")
}
if (!(as.name(outcome) %in% names(outcomes))){
stop("invalid outcome")
}
# filter out only the state we're interested in
state.hospitals <- subset(outcomes, outcomes$State == state)
# get the rank now..
if (rank == "best"){
eff.rank <- 1
} else if (rank == "worst") {
eff.rank <- nrow(state.hospitals)
} else {
eff.rank <- rank
}
# get the dynamic column for the disease
outcome.col.index <- match(as.name(outcome), names(outcomes))
state.outcome.col <- as.numeric(state.hospitals[ , outcome.col.index])
# discard the rest of the columns, not sure if this performs better
# certainly debugs better..
name.col.index = 2
debug.state.hospitals <- state.hospitals[ , c(name.col.index,outcome.col.index)]
View(debug.state.hospitals)
row.ordering <- order(state.outcome.col,
state.hospitals[ , name.col.index],
na.last=TRUE)
ordered.state.hospitals <- state.hospitals[ row.ordering , ]
View(ordered.state.hospitals)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
outcomes
View(outcomes)
rankhospital("NC", "heart attack", "worst")
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
submit()
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
View(ordered.hospitals)
rankhospital("TX", "heart failure", 4)
View(ordered.hospitals)
rankhospital("TX", "heart failure", 4)
View(ordered.hospitals)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
View(ordered.hospitals)
rankhospital("TX", "heart failure", 4)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
View(ordered.hospitals)
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
?aggregate
submit
()
submit()
submit()
best("NY", "pneumonia")
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
best("NY", "pneumonia")
require('RUnit')
library('RUnit')
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
%in%
?in
?match
submit()
best("SC", "heart attack")
submit()
best("NY", "pneumonia")
best("SC", "heart attack") == "MUSC MEDICAL CENTER"
best("NY", "pneumonia")    == "MAIMONIDES MEDICAL CENTER"
best("SC", "heart attack") == "MUSC MEDICAL CENTER"
best("NY", "pneumonia")    == "MAIMONIDES MEDICAL CENTER"
submit()
best("NN", "pneumonia")
best("NN", "pneumonia")
best("NN", "pneumonia")    == NA
submit()
submit()
submit()
submit()
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
fn.rank("best","pneumonia")
rf <- fn.rank("best","pneumonia")
rf
ls(df)
ls(environment(df)
)
rf <- fn.rank("best","pneumonia")
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
state <- "NY"
outcome <- "pneumonia"
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
rf(state.hospitals)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rf <- fn.rank("best","pneumonia")
rf(state.hospitals)
source('~/.active-rstudio-document')
rf <- fn.rank("best","pneumonia")
rf(state.hospitals)
submit()
submit()
submit()
submit()
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
ordered.hospitals <- ordered(state.hospitals, outcome)
View(ordered.hospitals)
View(outcomes)
names(outcomes)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
ordered.hospitals <- ordered(state.hospitals, outcome)
View(ordered.hospitals)
?aggregate
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
testDF
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
View(ordered.hospitals)
aggregate(ordered.hospitals, State, mean)
aggregate(ordered.hospitals, ordered.hospitals$State, mean)
aggregate(ordered.hospitals, list(ordered.hospitals$State), mean)
aggregate(. ~ State, data=ordered.hospitals, mean)
?xtabs
str(ordered.hospitals)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia")
View(all.hospitals)
?apply
?lapply
?split
split(all.hospitals, all.hospitals$State)
x <- all.hospitals[ , c(State, Hospital.Name)]
sh <- split(all.hospitals, all.hospitals$State)
str(sh)
sh <- split(all.hospitals, all.hospitals$State)
head(sh)
?split
sh[1]
sh1 <- sh[1]
View(sh1)
?lapply
source('~/.active-rstudio-document')
select
select()
select <- function(df,names){
col.index <- function(name){
match(name, names(df))
}
idxs <- lapply(names, col.index)
df( , idxs)
}
select()
select
noh <- select(ordered.hospitals, c("State", "Hospital.Name", as.name(outcome)))
select <- function(df,names){
col.index <- function(name){
match(name, names(df))
}
idxs <- lapply(names, col.index)
df[ , idxs]
}
noh <- select(ordered.hospitals, c("State", "Hospital.Name", as.name(outcome)))
select <- function(df,names){
col.index <- function(name){
match(name, names(df))
}
idxs <- sapply(names, col.index)
df[ , idxs]
}
noh <- select(ordered.hospitals, c("State", "Hospital.Name", as.name(outcome)))
View(noh)
submit()
str(all.hospitals)
nh <- all.hospitals[ ,c("State","Hospital.Name",as.name("pneumonia"))]
str(nh)
p <- as.name("pneumonia")
nh[],p] <- as.numeric(nh[,p])
nh[,p] <- as.numeric(nh[,p])
str(nh)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
submit()
submit()
best("SC", "heart attack")
View(hospitals)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
best("SC", "heart attack")
submit()
submit()
submit()
submit()
submit()
?as.numeric
?split
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
submit()
submit()
submit()
?sapply
?tapply
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia")
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia")
str(all.hospitals)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
all.hospitals <- validated.input(state,outcome)
all.hospitals <- narrow(all.hospitals)
all.hospitals <- debug.narrow(all.hospitals, outcome)
View(all.hospitals)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
View(all.hospitals)
str(all.hospitals)
by(all.hospitals, all.hospitals$State, length)
by(all.hospitals, all.hospitals$State, nrow)
by(all.hospitals, all.hospitals$State, fn.rank(num,outcome))
num<-20
x <- by(all.hospitals, all.hospitals$State, fn.rank(num,outcome))
str(x)
head(x,10)
str(x)
names(x)
View(x)
dimnames(x)
tmp <- aggregate(all.hospitals, all.hospitals$State, fn.rank(num,outcome))
tmp <- aggregate(all.hospitals, list(all.hospitals$State), fn.rank(num,outcome))
tmp <- aggregate(all.hospitals, list(all.hospitals$State), x[3,])
split.hospitals <- split(all.hospitals, all.hospitals$State)
str(split.hospitals)
View(split.hospitals)
lapply(split.hospitals, fn.rank(num,outcome))
tmp <- lapply(split.hospitals, fn.rank(num,outcome))
View(tmp)
str(tmp)
?merge
?split apply
x
typeof(x)
sapply(split.hospitals, fn.rank(num,outcome))
?tapply
tmp <- tapply(all.hospitals, all.hospitals$State, head)
View(all.hospitals)
all.hospitals["pneumonia"]
all.hospitals$["pneumonia"]
all.hospitals$"pneumonia"
all.hospitals$"Hospital.Name"
all.hospitals$"Name"
?fold
?apply
tmp <- aggregate(all.hospitals, list(all.hospitals$State), mean)
warnings()
tmp <- aggregate(all.hospitals, list(all.hospitals$State), head)
str(tmp)
View(tmp)
?aggregate
tmp <- aggregate(all.hospitals, list(all.hospitals$State), fn.rank(1,outcome))
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
tmp <- aggregate(all.hospitals, list(all.hospitals$State), fn.rank(1,outcome))
str(outcome)
str(rank)
tmp <- aggregate(all.hospitals, list(all.hospitals$State), fn.rank(1,outcome))
tmp <- aggregate(all.hospitals, list(all.hospitals$State), fn.rank(1,outcome))
df
rankall("pneumonia",1)
View(hospitals)
df
View(df)
View(hospitals)
View(ordered.hospitals)
View(hospitals)
rankall("pneumonia",1)
rankall("pneumonia",1)
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia",1)
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
rankall("pneumonia",1)
rankall("pneumonia",1)
debugSource('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
rankall("pneumonia",1)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
rankall("pneumonia",1)
rm(all.hospitals)
rm(ordered.hospitals)
rm(ordered.state.hospitals)
rm(sort.*)
rm(sort*.*)
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
rankall("pneumonia",1)
rankall("pneumonia",1)
all.hospitals
hospitals
state
oucome
outcome
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
all.hospitals[,-State]
all.hospitals[,-all.hospitals$State]
all.hospitals[,-1]
tmp <- aggregate(all.hospitals[,-1], list(all.hospitals$State), fn.rank(1,outcome))
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/rankhospital.R')
tmp <- aggregate(all.hospitals[,-1], list(all.hospitals$State), fn.rank(1,outcome))
tmp <- aggregate(all.hospitals[,-1], list(all.hospitals$State), fn.rank(1,outcome))
tmp <- aggregate(all.hospitals[,-1], list(all.hospitals$State), fn.rank(1,outcome))
View(hospitals)
View(x)
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
split.hospitals <- split(all.hospitals, all.hospitals$State)
tmp <- sapply(split.hospitals, fn.rank(num,outcome))
View(tmp)
View(split.hospitals)
str(split.hospitals)
?split
df <- data.frame(
x=rnorm(25),
y=rnorm(25),
g=rep(factor(LETTERS[1:5]), 5)
)
View(df)
split(df,df$g)
tmp <- split(df,df$g)
str(tmp)
tmp[1]
str(tmp[1])
unsplit(tmp)
unsplit(tmp,1:5)
warnings()
str(tmp[[1]])
str(split.hospitals)
split.hospitals[[1]]
str(split.hospitals[[1]])
tmp2 <- sapply(split.hospitals, fn.rank(num,outcome))
source('~/dev/coursera/Data Science/R programming/ProgrammingAssignment3/Best.R')
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
split.hospitals <- split(all.hospitals, all.hospitals$State)
tmp2 <- sapply(split.hospitals, fn.rank(num,outcome))
str(tmp2)
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
all.hospitals <- validated.input(state,outcome)
state.hospitals <- filter(all.hospitals, state)
state="NY"
outcome="pneumonia"
all.hospitals <- validated.input(state,outcome)
all.hospitals <- debug.narrow(all.hospitals, outcome)
